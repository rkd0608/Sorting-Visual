{"ast":null,"code":"import _slicedToArray from \"/Users/rakshitdwivedi/Desktop/React/sorting-visual/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/rakshitdwivedi/Desktop/React/sorting-visual/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport React from 'react';\nimport $ from 'jquery';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './SortingVisualizer.css'; // Change this value for the speed of the animations.\n\nconst ANIMATION_SPEED_MS = 10; // Change this value for the number of bars (value) in the array.\n\nconst NUMBER_OF_ARRAY_BARS = 310; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = '#03A9F4'; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'red';\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n\n    if ($(window).width() < 700) {\n      alert('Please view this website on your computer for better experience. The array size is quite large!');\n    }\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 630));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const _animations$i = _slicedToArray(animations[i], 2),\n              barOneIdx = _animations$i[0],\n              barTwoIdx = _animations$i[1];\n\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const _animations$i2 = _slicedToArray(animations[i], 2),\n                barOneIdx = _animations$i2[0],\n                newHeight = _animations$i2[1];\n\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = \"\".concat(newHeight, \"px\");\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {// We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  heapSort() {// We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  bubbleSort() {\n    alert(\"Bubble sort is currently unavailable\");\n  } // testSortingAlgorithms() {\n  //   for (let i = 0; i < 100; i++) {\n  //     const array = [];\n  //     const length = randomIntFromInterval(1, 1000);\n  //     for (let i = 0; i < length; i++) {\n  //       array.push(randomIntFromInterval(-1000, 1000));\n  //     }\n  //     const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n  //     const mergeSortedArray = getMergeSortAnimations(array.slice());\n  //     console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n  //   }\n  // }\n\n\n  render() {\n    const array = this.state.array;\n    return React.createElement(\"body\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"parent-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"nav\", {\n      className: \"navbar\",\n      role: \"navigation\",\n      \"aria-label\": \"main-navigation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"navbarBasicExample\",\n      className: \"button-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"button is-info navbar-item\",\n      style: {\n        marginRight: '1.5rem'\n      },\n      onClick: () => this.resetArray(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Reset array\"), React.createElement(\"button\", {\n      className: \"button is-danger\",\n      style: {\n        marginRight: '1.5rem'\n      },\n      onClick: () => this.mergeSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Merge Sort\"), React.createElement(\"button\", {\n      className: \"button is-danger\",\n      style: {\n        marginRight: '1.5rem'\n      },\n      onClick: () => this.quickSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Quick Sort\"), React.createElement(\"button\", {\n      className: \"button is-danger\",\n      style: {\n        marginRight: '1.5rem'\n      },\n      onClick: () => this.heapSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Heap Sort\"), React.createElement(\"button\", {\n      className: \"button is-danger\",\n      style: {\n        marginRight: '1.5rem'\n      },\n      onClick: () => this.bubbleSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Bubble Sort\"))), React.createElement(\"div\", {\n      className: \"array-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, array.map((value, idx) => React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        height: \"\".concat(value, \"px\")\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    })))));\n  }\n\n} // From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n} // function arraysAreEqual(arrayOne, arrayTwo) {\n//   if (arrayOne.length !== arrayTwo.length) return false;\n//   for (let i = 0; i < arrayOne.length; i++) {\n//     if (arrayOne[i] !== arrayTwo[i]) {\n//       return false;\n//     }\n//   }\n//   return true;\n// }","map":{"version":3,"sources":["/Users/rakshitdwivedi/Desktop/React/sorting-visual/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","$","getMergeSortAnimations","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","window","width","alert","i","push","randomIntFromInterval","setState","mergeSort","animations","length","arrayBars","document","getElementsByClassName","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","quickSort","heapSort","bubbleSort","render","marginRight","map","value","idx","min","max","Math","floor","random"],"mappings":"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","sourcesContent":["import React from 'react';\nimport $ from 'jquery';\nimport {getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './SortingVisualizer.css';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 10;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 310;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = '#03A9F4';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n    if ($(window).width() < 700) {\n      alert('Please view this website on your computer for better experience. The array size is quite large!');\n    }\n    \n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 630));\n    }\n    this.setState({array});\n  }\n\n  \n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  heapSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  bubbleSort() {\n    alert(\"Bubble sort is currently unavailable\");\n  }\n\n  \n  // testSortingAlgorithms() {\n  //   for (let i = 0; i < 100; i++) {\n  //     const array = [];\n  //     const length = randomIntFromInterval(1, 1000);\n  //     for (let i = 0; i < length; i++) {\n  //       array.push(randomIntFromInterval(-1000, 1000));\n  //     }\n  //     const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n  //     const mergeSortedArray = getMergeSortAnimations(array.slice());\n  //     console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n  //   }\n  // }\n\n  render() {\n    const {array} = this.state;\n\n    return (\n            <body>\n              <div className=\"parent-container\">\n                <nav className='navbar' role='navigation' aria-label='main-navigation'>\n                 \n                    \n                    <div id=\"navbarBasicExample\" className=\"button-container\">\n                      <button className=\"button is-info navbar-item\" style={{marginRight: '1.5rem'}} onClick={() => this.resetArray()}>Reset array</button> \n                      <button className=\"button is-danger\" style={{marginRight: '1.5rem'}} onClick={() => this.mergeSort()}>Merge Sort</button>\n                      <button className=\"button is-danger\" style={{marginRight: '1.5rem'}} onClick={() => this.quickSort()}>Quick Sort</button>\n                      <button className=\"button is-danger\" style={{marginRight: '1.5rem'}} onClick={() => this.heapSort()}>Heap Sort</button>\n                      <button className=\"button is-danger\" style={{marginRight: '1.5rem'}} onClick={() => this.bubbleSort()}>Bubble Sort</button> \n                    </div>\n                  \n                </nav>\n                <div className=\"array-container\">\n                    {array.map((value, idx) => (\n                        <div className=\"array-bar\" key={idx} style={{height: `${value}px`}}>\n                            \n                        </div>\n                    ))}\n                    {/* <nav className='navbar' role='navigation' aria-label='main-navigation'>\n                        <div id=\"navbarBasicExample\" className=\"navbar-menu\">\n                            <button className=\"button is-info navbar-item\" onClick={() => this.resetArray()}>Reset array</button>\n                            <button className=\"button is-danger\" onClick={() => this.mergeSort()}>Merge Sort</button>\n                            <button className=\"button is-danger\" onClick={() => this.quickSort()}>Quick Sort</button>\n                            <button className=\"button is-danger\" onClick={() => this.heapSort()}>Heap Sort</button>\n                            <button className=\"button is-danger\" onClick={() => this.bubbleSort()}>Bubble Sort</button> \n                        </div>\n                    </nav> */}\n                </div>\n                </div>\n            </body>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n// function arraysAreEqual(arrayOne, arrayTwo) {\n//   if (arrayOne.length !== arrayTwo.length) return false;\n//   for (let i = 0; i < arrayOne.length; i++) {\n//     if (arrayOne[i] !== arrayTwo[i]) {\n//       return false;\n//     }\n//   }\n//   return true;\n// }\n"]},"metadata":{},"sourceType":"module"}